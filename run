#!/bin/bash
clear

# Reads the 'user' file
user=$(<user)  # Efficient reading of the user

# Reads the IPs from the 'target' file
mapfile -t ips < target  # Direct read into an array, more efficient.

# Checks if any command was passed as an argument.
if [ $# -gt 0 ]; then
  command="$@"
else
  command=$(<2dos)  # Faster reading of the file's content.
fi

# Colors for highlighting
RED='\033[0;31m'
GREEN='\033[0;32m'
GRAY='\033[0;90m'
NC='\033[0m' # Sem cor

# Loops over the IPs
for ip in "${ips[@]}"; do
  # Checks if the server is accessible with a basic connection test.
  ssh -o ConnectTimeout=3 -q "$user@$ip" exit
  if [ $? -ne 0 ]; then
    # Server inaccessible message
    echo -e "${RED}------------------------------[ Inaccessible Server - $ip ]------------------------------${NC}\n"
    echo ""
    echo ""
    continue  # Proceed to the next IP.
  fi

  # If the connection is successful, execute the command:
  output=$(ssh -q "$user@$ip" "
    hostname; nice -n -15 ionice -c2 -n1 bash -c '$command' 2>&1
  ")

  # Displays the header
  hostname_remote=$(echo "$output" | head -n 1)  # A primeira linha da saída é o hostname
  echo -e "${GREEN}-----------------------------------[ $hostname_remote - $ip ]-----------------------------------${NC}"
  echo ""

  # Remove the hostname from the output.
  command_output=$(echo "$output" | tail -n +2)  # Remove the first line. (hostname)

  # hecks if there is output from the command.
  if [ -z "$command_output" ]; then
    echo -e "${GRAY}No output from the command.${NC}"
  else
    echo "$command_output"  # Exibe a saída do comando
  fi

  # Adds a blank line after the execution of each block.
  echo ""
done
